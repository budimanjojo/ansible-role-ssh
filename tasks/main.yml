---
- name: Gather os specific variables
  ansible.builtin.include_vars: "{{ lookup('first_found', items) }}"
  vars:
    items:
      files:
      - "{{ ansible_distribution }}.yml"
      - "{{ ansible_os_family }}.yml"
      - default.yml
      paths:
      - ./vars

- name: Ensure Openssh is installed
  ansible.builtin.package:
    name: "{{ ssh_packages }}"
    state: present

- name: Check if sshd_config.d exists
  ansible.builtin.stat:
    path: "{{ ssh_directory_path }}/sshd_config.d"
  register: ssh_sshd_config_d_exists

- name: Configure sshd_config
  ansible.builtin.template:
    src: etc/ssh/sshd_config.j2
    dest: "{{ ssh_directory_path }}/sshd_config"
    mode: 0600
    owner: root
    group: root
    validate: sshd -T -f %s
  notify:
  - Restart ssh

- name: Register ssh host keys
  ansible.builtin.find:
    paths: "{{ ssh_directory_path }}"
    file_type: file
    patterns: 'ssh_host_*'
    excludes: '*.pub'
  register: ssh_host_keys

- name: Ensure sshd host keys permissions are correct
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: 0600
    owner: root
    group: root
  loop: "{{ ssh_host_keys.files }}"
  loop_control:
    label: "{{ item.path }}"

- name: Check if ssh_config.d exists
  ansible.builtin.stat:
    path: "{{ ssh_directory_path }}/ssh_config.d"
  register: ssh_ssh_config_d_exists

- name: Configure ssh_config
  ansible.builtin.template:
    src: etc/ssh/ssh_config.j2
    dest: "{{ ssh_directory_path }}/ssh_config"
    mode: 0644
    owner: root
    group: root

- name: Ensure ssh service is enabled on boot
  ansible.builtin.service:
    name: "{{ ssh_service_name }}"
    enabled: yes
